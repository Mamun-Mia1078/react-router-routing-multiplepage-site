{"ast":null,"code":"export const blogsData = [{\n  id: 1,\n  title: \"History Of HTML\",\n  body: \"1993 - Present: The first version of HTML was written by Tim Berners in 1993. Since Then there have been many different versions of html. The most widely used version throughout the 2000,s was HTML 4.01, which became an official standard in December 1999 ML is a standard markup language that is used to create other markup languages. Hundreds of XML languages are in use today, including GML (Geography Markup Language), MathML, MusicML, and RSS (Really Simple Syndication). Since each of these languages was written in a common language (XML), their content can easily be shared across applications. This makes XML potentially very powerful, and it's no surprise that the W3C would create an XML version of HTML (again, called XHTML). XHTML became an official standard in 2000, and was updated in 2002. XHTML is very similar to HTML, but has stricter rules. Strict rules are necessary for all XML languages, because without it, interoperability between applications would be impossible. You'll learn more about the differences between HTML and XHTML in Unit 2. The following table shows a list of many of the types of content that can be added to web pages using different versions of HTML. In the early days of the Web, HTML (version 1.2) was very simple, but over time new versions were released that added more and more features. Still, if web designers wanted to add content or features that HTML didn't support, they would have to do so with non-standard proprietary technologies such as Adobe Flash. These technologies would require users to install browser plug-ins, and in some cases meant that certain users would be unable to access the content (for example, iPhones and iPads don't support Flash). \"\n}, {\n  id: 2,\n  title: \"History Of CSS\",\n  body: \" Cascading style sheets (CSS) were the World Wide Web Consortium's answer to the development, in the mid-1990s, of a number of presentational HTML elements that threatened to blur the distinction between the appearance of a document, i.e. what the document looks like, and its underlying structure and meaning. ithin little over a year of Netscape's introduction of the <font> tag in 1995, W3C had little option but to include the new tag in the HTML 3.2 specification, which was published as a W3C Recommendation in January 1997. However, they had already started work on CSS. The first W3C CSS Recommendation (CSS 1) was released in 1996, providing web authors with the means to separate the code that defined the appearance of a web page from the code that defined its content. Unfortunately, it would be over three years before any of the major web browsers managed to implement the bulk of the CSS specification. As a consequence, the adoption of CSS by web authors was initially somewhat slow. Meanwhile CSS 2, essentially a superset of CSS 1, was released in 1998. The release was perhaps somewhat premature, since CSS 2 suffered from a number of errors and was consequently reformulated as CSS 2.1. CSS 2.1 fixed the errors in the CSS 2 specification, removed some of the feature that were either poorly supported or not supported at all by web browsers, and added new features to bring the specification in line with extensions that had already been implemented by browser vendors. Even so, work would continue on the specification for a number of years, with CSS 2.1 finally being published as an official WC3 recommendation in 2011. Meanwhile, in 1998, work had already begun on CSS 3. WC3 had obviously learned from their experiences with CSS 2 that there were no guarantees that browser vendors would adopt new CSS features. Even if they did, there could be a significant delay between the issuing of a draft specification and its adoption, and browser implementations would not necessarily adhere to the specification as written.Unlike previous specifications, CSS 3 is not a single monolithic specification. It is published as a set of separate documents known as modules. Each module deals with a relatively small subset of the overall specification, and either adds new features or refines and extends existing features. All additions and enhancements to the specification are written in order to be backward-compatible with older versions of CSS.  \"\n}, {\n  id: 3,\n  title: \"History Of JavaScript\",\n  body: \"JavaScript is arguably the most important programming language in the world. Google, YouTube, Wikipedia, Yahoo!, Amazon, Facebook, eBay, LinkedIn, and Twitter have all been built using JavaScript. Virtually everything a user directly interacts with on these websites has been made with JavaScript. There’s no question about it: becoming a JavaScript programmer is one of the best career choices you can possibly make in 2020. So how do you start learning it in San Diego? Are there any other languages that go well with it? What are the Ruby on Rails vs JavaScript pros and cons? Should JavaScript be used together with Ruby? Before you truly dive into the technical side of coding, it’s important to get an understanding of how JavaScript was first introduced, and how it became the programming powerhouse it is today. Read on to learn more.Brendan Eich created JavaScript in 1995 while he was at Netscape Communications Corporation, the creators of the legendary Netscape Navigator web browser. At the time, the Java coding language was rapidly gaining traction and Netscape Communications was working to make it available in Netscape Communicator.However, Java was too large and too complex to appeal to amateurs, scripters, and designers. In order to solve this problem, Netscape Communications contracted Brendan Eich to design a versatile programming language that could speed up web development and serve as a scripting companion for Java.And yet, instead of being just a Scheme for Netscape Navigator, JavaScript went on to become something much bigger.The early versions of JavaScript were called Mocha. Not long after a Mocha prototype was introduced into Netscape Communicator (May 1995), it was renamed to LiveScript, purely because the world Live was better for marketing. It was renamed again in December of the same year, this time into JavaScript.This first version of JavaScript defined the many great traits (such as its object-model) this coding language is known for today. It also boasted a number of powerful features that would eventually enable it to outgrow its original purpose.Back in 1995, Netscape Communicator (a paid internet browser) was by far the most popular web browser in the world. The founder of Netscape Communications, Marc Andreeseen, wanted to make the web more dynamic by making animations, user interaction, and other types of automation a standard part of any website.   \"\n}, {\n  id: 4,\n  title: \"Frontend Development Roadmap\",\n  body: \"For stepping into Front-End Development, the most essential skills you should have are HTML, CSS, and JavaScript. These skills are the bare minimum to start with Front-End Development. Note that front-end web development is not just limited to these three skills, there are many more technologies that you will need to learn to excel as a Front-End Developer in 2022. HTML = HTML stands for HyperText Markup Language. It is used to form the “skeleton”, or the base, of any website. It lays out a website’s general structure and content. The elements that you see on the screen - buttons, images, sliders, date pickers, texts, lists, etc. are all added using HTML. CSS stands for Cascading Style Sheets using which you can add styles to your web pages like colors, fonts, layouts, and animations. With CSS, you can also make responsive websites that can change layout and styles according to the device resolution and orientation so that users have a seamless experience while using your website on devices of any size. CSS allows you to style multiple elements at once. It uses tag, class, and id selectors to target HTML elements that we want to style. We can then use these selectors to write style rules containing a property name like “font-size”, “background-color”, “margin-left”, etc. and values for these properties.Now that we have built the layout of our website using HTML and styled it using CSS, the next step is to add “actions” to our websites. This is done using the JavaScript programming language.  It improves the interactivity of your website. You can also create dynamic UI elements using JavaScript. JavaScript adds functionality to your website. For example, opening a menu on click of a button, updating the progress in a progress bar, sending a request containing your username and password to an authentication service after you click on the “Login” button to check if you are an authorized user, etc.  With the help of JavaScript, your website can respond to user activities on the page.    \"\n}, {\n  id: 5,\n  title: \"Backend Development\"\n}];","map":{"version":3,"names":["blogsData","id","title","body"],"sources":["D:/router/src/data.js"],"sourcesContent":["export const blogsData = [\r\n    {\r\n        id:1,\r\n        title:\"History Of HTML\",\r\n        body: \"1993 - Present: The first version of HTML was written by Tim Berners in 1993. Since Then there have been many different versions of html. The most widely used version throughout the 2000,s was HTML 4.01, which became an official standard in December 1999 ML is a standard markup language that is used to create other markup languages. Hundreds of XML languages are in use today, including GML (Geography Markup Language), MathML, MusicML, and RSS (Really Simple Syndication). Since each of these languages was written in a common language (XML), their content can easily be shared across applications. This makes XML potentially very powerful, and it's no surprise that the W3C would create an XML version of HTML (again, called XHTML). XHTML became an official standard in 2000, and was updated in 2002. XHTML is very similar to HTML, but has stricter rules. Strict rules are necessary for all XML languages, because without it, interoperability between applications would be impossible. You'll learn more about the differences between HTML and XHTML in Unit 2. The following table shows a list of many of the types of content that can be added to web pages using different versions of HTML. In the early days of the Web, HTML (version 1.2) was very simple, but over time new versions were released that added more and more features. Still, if web designers wanted to add content or features that HTML didn't support, they would have to do so with non-standard proprietary technologies such as Adobe Flash. These technologies would require users to install browser plug-ins, and in some cases meant that certain users would be unable to access the content (for example, iPhones and iPads don't support Flash). \", \r\n    },\r\n    {\r\n        id:2,\r\n        title:\"History Of CSS\",\r\n        body: \" Cascading style sheets (CSS) were the World Wide Web Consortium's answer to the development, in the mid-1990s, of a number of presentational HTML elements that threatened to blur the distinction between the appearance of a document, i.e. what the document looks like, and its underlying structure and meaning. ithin little over a year of Netscape's introduction of the <font> tag in 1995, W3C had little option but to include the new tag in the HTML 3.2 specification, which was published as a W3C Recommendation in January 1997. However, they had already started work on CSS. The first W3C CSS Recommendation (CSS 1) was released in 1996, providing web authors with the means to separate the code that defined the appearance of a web page from the code that defined its content. Unfortunately, it would be over three years before any of the major web browsers managed to implement the bulk of the CSS specification. As a consequence, the adoption of CSS by web authors was initially somewhat slow. Meanwhile CSS 2, essentially a superset of CSS 1, was released in 1998. The release was perhaps somewhat premature, since CSS 2 suffered from a number of errors and was consequently reformulated as CSS 2.1. CSS 2.1 fixed the errors in the CSS 2 specification, removed some of the feature that were either poorly supported or not supported at all by web browsers, and added new features to bring the specification in line with extensions that had already been implemented by browser vendors. Even so, work would continue on the specification for a number of years, with CSS 2.1 finally being published as an official WC3 recommendation in 2011. Meanwhile, in 1998, work had already begun on CSS 3. WC3 had obviously learned from their experiences with CSS 2 that there were no guarantees that browser vendors would adopt new CSS features. Even if they did, there could be a significant delay between the issuing of a draft specification and its adoption, and browser implementations would not necessarily adhere to the specification as written.Unlike previous specifications, CSS 3 is not a single monolithic specification. It is published as a set of separate documents known as modules. Each module deals with a relatively small subset of the overall specification, and either adds new features or refines and extends existing features. All additions and enhancements to the specification are written in order to be backward-compatible with older versions of CSS.  \"\r\n    },\r\n   \r\n    {\r\n        id:3,\r\n        title:\"History Of JavaScript\",\r\n        body: \"JavaScript is arguably the most important programming language in the world. Google, YouTube, Wikipedia, Yahoo!, Amazon, Facebook, eBay, LinkedIn, and Twitter have all been built using JavaScript. Virtually everything a user directly interacts with on these websites has been made with JavaScript. There’s no question about it: becoming a JavaScript programmer is one of the best career choices you can possibly make in 2020. So how do you start learning it in San Diego? Are there any other languages that go well with it? What are the Ruby on Rails vs JavaScript pros and cons? Should JavaScript be used together with Ruby? Before you truly dive into the technical side of coding, it’s important to get an understanding of how JavaScript was first introduced, and how it became the programming powerhouse it is today. Read on to learn more.Brendan Eich created JavaScript in 1995 while he was at Netscape Communications Corporation, the creators of the legendary Netscape Navigator web browser. At the time, the Java coding language was rapidly gaining traction and Netscape Communications was working to make it available in Netscape Communicator.However, Java was too large and too complex to appeal to amateurs, scripters, and designers. In order to solve this problem, Netscape Communications contracted Brendan Eich to design a versatile programming language that could speed up web development and serve as a scripting companion for Java.And yet, instead of being just a Scheme for Netscape Navigator, JavaScript went on to become something much bigger.The early versions of JavaScript were called Mocha. Not long after a Mocha prototype was introduced into Netscape Communicator (May 1995), it was renamed to LiveScript, purely because the world Live was better for marketing. It was renamed again in December of the same year, this time into JavaScript.This first version of JavaScript defined the many great traits (such as its object-model) this coding language is known for today. It also boasted a number of powerful features that would eventually enable it to outgrow its original purpose.Back in 1995, Netscape Communicator (a paid internet browser) was by far the most popular web browser in the world. The founder of Netscape Communications, Marc Andreeseen, wanted to make the web more dynamic by making animations, user interaction, and other types of automation a standard part of any website.   \",\r\n    },\r\n    {\r\n        id:4,\r\n        title:\"Frontend Development Roadmap\",\r\n        body: \"For stepping into Front-End Development, the most essential skills you should have are HTML, CSS, and JavaScript. These skills are the bare minimum to start with Front-End Development. Note that front-end web development is not just limited to these three skills, there are many more technologies that you will need to learn to excel as a Front-End Developer in 2022. HTML = HTML stands for HyperText Markup Language. It is used to form the “skeleton”, or the base, of any website. It lays out a website’s general structure and content. The elements that you see on the screen - buttons, images, sliders, date pickers, texts, lists, etc. are all added using HTML. CSS stands for Cascading Style Sheets using which you can add styles to your web pages like colors, fonts, layouts, and animations. With CSS, you can also make responsive websites that can change layout and styles according to the device resolution and orientation so that users have a seamless experience while using your website on devices of any size. CSS allows you to style multiple elements at once. It uses tag, class, and id selectors to target HTML elements that we want to style. We can then use these selectors to write style rules containing a property name like “font-size”, “background-color”, “margin-left”, etc. and values for these properties.Now that we have built the layout of our website using HTML and styled it using CSS, the next step is to add “actions” to our websites. This is done using the JavaScript programming language.  It improves the interactivity of your website. You can also create dynamic UI elements using JavaScript. JavaScript adds functionality to your website. For example, opening a menu on click of a button, updating the progress in a progress bar, sending a request containing your username and password to an authentication service after you click on the “Login” button to check if you are an authorized user, etc.  With the help of JavaScript, your website can respond to user activities on the page.    \", \r\n    },\r\n    {\r\n        id: 5, \r\n        title: \"Backend Development\"\r\n    }\r\n]"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CACrB;EACIC,EAAE,EAAC,CADP;EAEIC,KAAK,EAAC,iBAFV;EAGIC,IAAI,EAAE;AAHV,CADqB,EAMrB;EACIF,EAAE,EAAC,CADP;EAEIC,KAAK,EAAC,gBAFV;EAGIC,IAAI,EAAE;AAHV,CANqB,EAYrB;EACIF,EAAE,EAAC,CADP;EAEIC,KAAK,EAAC,uBAFV;EAGIC,IAAI,EAAE;AAHV,CAZqB,EAiBrB;EACIF,EAAE,EAAC,CADP;EAEIC,KAAK,EAAC,8BAFV;EAGIC,IAAI,EAAE;AAHV,CAjBqB,EAsBrB;EACIF,EAAE,EAAE,CADR;EAEIC,KAAK,EAAE;AAFX,CAtBqB,CAAlB"},"metadata":{},"sourceType":"module"}